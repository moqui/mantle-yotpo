<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.
To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.
You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- These services are based on the YotPo API, version 1. See: https://apidocs.yotpo.com/reference#general-information -->
    <service verb="get" noun="HasPurchased">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="hasPurchased"/>
        </out-parameters>
        <actions>
            <set field="hasPurchased" from="false"/>
            <if condition="ec.user.userAccount == null"><return /></if>
            <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="orderList" distinct="true">
                <econdition field-name="customerPartyId" from="ec.user.userAccount.partyId"/>
                <econdition field-name="statusId" operator="not-in" value="OrderHold,OrderRejected,OrderCancelled"/>
                <econdition field-name="productStoreId" />
                <select-field field-name="orderId" />
            </entity-find>

            <iterate list="orderList" entry="order">
                <service-call name="mantle.order.OrderInfoServices.get#OrderDisplayInfo" in-map="[orderId:order.orderId]"
                    out-map="orderInfo"/>

                <iterate list="orderInfo.orderItemList" entry="orderItem">
                    <if condition="orderItem.productId == productId">
                        <set field="hasPurchased" from="true"/>
                        <return />
                    </if>
                </iterate>
            </iterate>
        </actions>
    </service>
    <service verb="get" noun="YotPoProductData">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="detailUrl"/>
            <parameter name="name"/>
            <parameter name="imageUrl"/>
            <parameter name="priceString"/><!-- NOTE: is a string as per YotPo API docs -->
            <parameter name="priceUomId"/>
            <parameter name="description"/>
            <parameter name="specs" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return message="No product found with ID ${productId}"/></if>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>

            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="productImageLocationList">
                <date-filter/>
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" value="PsstProductImageUrl"/>
            </entity-find>
            <!-- allow this: <if condition="productImageLocation == null"><return message="No productImageLocation found with productStoreId ${productStoreId}"/></if> -->
            <set field="productImageLocation" from="productImageLocationList ? productImageLocationList[0] : null"/>

            <entity-find entity-name="mantle.product.store.ProductStoreSetting" list="productDetailLocationList">
                <date-filter/>
                <econdition field-name="productStoreId" from="productStoreId"/>
                <econdition field-name="settingTypeEnumId" value="PsstProductDetailUrl"/>
            </entity-find>
            <if condition="!productDetailLocationList">
                <log message="No PsstProductDetailUrl found for Store ${productStoreId}, not sending YotPo data"/>
                <return/>
            </if>
            <set field="productDetailLocation" from="productDetailLocationList[0]"/>

            <entity-find entity-name="mantle.product.ProductContent" list="contentList" cache="true">
                <date-filter/><econdition field-name="productId"/>
                <order-by field-name="sequenceNum,-fromDate"/>
            </entity-find>
            <if condition="contentList != null">
                <if condition="productImageLocation?.settingValue">
                    <set field="imageDetail" from="contentList.find({'PcntImageDetail' == it.productContentTypeEnumId})"/>
                    <if condition="imageDetail == null">
                        <set field="imageDetail" from="contentList.find({'PcntImageMedium' == it.productContentTypeEnumId})"/>
                        <if condition="imageDetail == null">
                            <set field="imageDetail" from="contentList.find({'PcntImageSmall' == it.productContentTypeEnumId})"/>
                        </if>
                    </if>
                    <if condition="imageDetail != null">
                        <set field="imageSettings" from="[storeDomain:productStore.storeDomain, productContentId:imageDetail.productContentId, productId:productId]"/>
                        <set field="imageUrl" from="ec.resource.expand(productImageLocation.settingValue, null, imageSettings, false)"/>
                    </if>
                </if>

                <set field="longDescLocation" from="contentList.find({'PcntDescriptionLong' == it.productContentTypeEnumId})?.contentLocation"/>
                <if condition="longDescLocation">
                    <set field="description" from="ec.resource.getLocationText(longDescLocation, true)"/>
                </if>
            </if>

            <set field="priceUomId" from="productStore.defaultCurrencyUomId ?: 'USD'"/>
            <service-call name="mantle.product.PriceServices.get#ProductPrice" out-map="priceMap"
                    in-map="[productId:productId, priceUomId:priceUomId, productStoreId:productStoreId]"/>
            <set field="price" from="priceMap.price"/>
            <set field="priceString" from="ec.l10n.format(price, '0.00')"/>

            <set field="detailSettings" from="[storeDomain:productStore.storeDomain, productId:productId]"/>
            <set field="detailUrl" from="ec.resource.expand(productDetailLocation.settingValue, null, detailSettings, false)"/>

            <set field="name" from="product.productName"/>
            <set field="specs" from="[mpn:product.pseudoId]"/>
        </actions>
    </service>

    <service verb="create" noun="Order">
        <in-parameters>
            <parameter name="orderId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader"/>
            <if condition="orderHeader == null"><return message="No Order found with orderId ${orderId}"/></if>
            <!-- return quietly if basic checks fail -->
            <if condition="!orderHeader.productStoreId"><return/></if>
            <if condition="orderHeader.salesChannelEnumId != 'ScWeb'"><return/></if>

            <set field="productStoreId" from="orderHeader.productStoreId"/>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore"/>
            <if condition="!productStore"><return message="No ProductStore found with ID ${productStoreId}"/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <!-- return quietly if no productStore.yotPoConfigId -->
            <if condition="yotPoConfigId == null"><return/></if>

            <!-- TODO consider some sort of check to see if order has already been sent to YotPo; not sure how it behaves with resend of same order_id -->

            <set field="orderPartList" from="orderHeader.parts"/>
            <if condition="!orderPartList"><return/></if>
            <set field="customerPartyId" from="orderPartList[0].customerPartyId"/>
            <if condition="!customerPartyId"><return/></if>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                in-map="[partyId:customerPartyId, emailContactMechPurposeId:'EmailOrder', defaultToPrimaryPurpose:true]"/>
            <set field="email" from="emailInfo.emailAddress"/>
            <if condition="email == null"><return message="No email found for customer ${customerPartyId}, not sending YotPo Order"/></if>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                <field-map field-name="partyId" from="customerPartyId"/></entity-find-one>
            <if condition="partyDetail == null"><return message="No partyDetail found with partyId ${customerPartyId}"/></if>

            <entity-find-one entity-name="mantle.yotpo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null"><return message="No YotPoConfiguration found with ID ${yotPoConfigId}"/></if>
            <set field="validateBool" from="yotPoConfig.validateData != 'N'"/>

            <set field="organizationName" from="partyDetail.organizationName ? partyDetail.organizationName : ''"/>
            <set field="customerName" from="partyDetail.firstName + ' ' + partyDetail.lastName + ' ' + organizationName"/>

            <entity-find entity-name="mantle.order.OrderItem" list="orderItems">
                <econdition field-name="orderId" from="orderId"/>
            </entity-find>
            <if condition="orderItems == null">
                <log level="error" message="No order items for order with id: ${orderId}"/>
                <return/>
            </if>
            <set field="productsList" from="[:]"/>

            <iterate list="orderItems" entry="orderItem">
                <if condition="orderItem.itemTypeEnumId == 'ItemProduct' &amp;&amp; orderItem.productId">
                    <set field="productId" from="orderItem.productId"/>

                    <!-- Init Get Virtual product Id -->
                    <entity-find-one entity-name="mantle.product.ProductAssocAndFrom" value-field="productAssoc">
                        <field-map field-name="toProductId" from="productId"/>
                        <field-map field-name="productTypeEnumId" value="PtVirtual"/>
                    </entity-find-one>

                    <!-- If exist virtual product we replace the product id for the virtual product id -->
                    <if condition="productAssoc">
                        <set field="productId" from="productAssoc.productId"/>
                    </if>
                    <!-- Finish Get Virtual product Id -->

                    <service-call name="mantle.yotpo.YotPoServices.get#YotPoProductData" out-map="prodData"
                            in-map="[productId:productId, productStoreId:productStoreId]"/>
                    <if condition="!prodData.detailUrl || !prodData.name">
                        <log level="warn" message="YotPo product ${productId} store ${productStoreId} required data missing, not sending order ${orderId} item ${orderItem.orderItemSeqId}: ${prodData}"/>
                        <continue/>
                    </if>

                    <set field="item" from="[url:prodData.detailUrl, name:prodData.name, image:prodData.imageUrl,
                            description:prodData.description, price:orderItem.unitAmount, specs:prodData.specs]"/>
                    <script>productsList.put(productId, item)</script>
                </if>
            </iterate>

            <set field="placedDateStr" from="ec.l10n.format(orderHeader.placedDate, 'yyyy-MM-dd')"/>
            <set field="requestMap" from="[validate_data:validateBool, platform:yotPoConfig.platform, email:email,
                    customer_name:customerName,order_date:placedDateStr, order_id:orderId, currency_iso:orderHeader.currencyUomId,
                    products:productsList]"/>

            <if condition="!yotPoConfig.clientId">
                <log level="warn" message="YotPo clientId not set, Order ${orderId} requestMap:\n${requestMap}"/>
                <return/>
            </if>

            <service-call name="mantle.yotpo.YotPoServices.login#YotPo" in-map="context" out-map="response"/>
            <if condition="response.token.access_token == null">
                <return error="true" message="Could not get YotPo Access Token"/>
            </if>
            <set field="requestMap.utoken" from="response.token.access_token"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method("POST")
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("apps").path(yotPoConfig.clientId).path("purchases").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
            
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo Order ${orderId} Response ${restResponse.statusCode} ${restResponse.reasonPhrase}: ${restResponse.text()}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode} ${restResponse.reasonPhrase}", "danger")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>

            <log level="warn" message="Json Object ended to Yotpo API: ${groovy.json.JsonOutput.toJson(requestMap)}"/>
            <message type="success">YotPo order successful (ID ${orderId})</message>
        </actions>
    </service>
    
    <service verb="update" noun="Product">
        <description>
            Update YotPo product data for each ProductStore with a yotPoConfigId that has the product in a configured store category.
            Designed to run on SECA rule on Product, TODO update.
        </description>
        <in-parameters>
            <parameter name="productId" required="true"/>
        </in-parameters>
        <actions>
            <entity-find entity-name="mantle.product.store.ProductStore" list="productStoreList">
                <econdition field-name="yotPoConfigId" operator="is-not-null"/></entity-find>
            <iterate list="productStoreList" entry="productStore">
                <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="storeCategoryList">
                    <date-filter/>
                    <econdition field-name="productStoreId" from="productStore.productStoreId"/>
                </entity-find>
                <if condition="!storeCategoryList"><continue/></if>
                <entity-find-count entity-name="mantle.product.category.ProductCategoryMember" count-field="storeProdCount">
                    <date-filter/>
                    <econdition field-name="productId"/>
                    <econdition field-name="productCategoryId" operator="in" from="storeCategoryList*.productCategoryId"/>
                </entity-find-count>

                <if condition="storeProdCount &gt; 0">
                    <service-call name="mantle.yotpo.YotPoServices.update#StoreProduct" in-map="[productId:productId, productStoreId:productStore.productStoreId]"/>
                </if>
            </iterate>
        </actions>
    </service>
    <service verb="update" noun="StoreProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return/></if>

            <entity-find-one entity-name="mantle.yotpo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null"><return type="danger" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/></if>

            <service-call name="mantle.yotpo.YotPoServices.get#YotPoProductData" out-map="prodData"
                    in-map="[productId:productId, productStoreId:productStoreId]"/>
            <if condition="!prodData.detailUrl || !prodData.name">
                <log message="YotPo product ${productId} store ${productStoreId} data: ${prodData}"/>
                <return type="danger" message="Could not find product detail URL or name so not sending product ${productId} data to YotPo for store ${productStoreId}"/>
            </if>

            <set field="itemMap" from="[name:prodData.name, url:prodData.detailUrl,
                    image_url:prodData.imageUrl, description:prodData.description,
                    currency:prodData.priceUomId, price:prodData.priceString, specs:prodData.specs]"/>
            <!-- NOTE: had product_tags:product.comments, based on YotPo definition of tags and their constraints (single word, no commas) this would be very bad -->
            <set field="requestMap" from="[products:[(productId):itemMap]]"/>

            <!-- TODO: remove this log, for review in production in first deployment -->
            <log message="YotPo Product ${productId} requestMap:\n${requestMap}"/>

            <if condition="!yotPoConfig.clientId">
                <log level="warn" message="YotPo clientId not set, Product ${productId} requestMap:\n${requestMap}"/>
                <return/>
            </if>

            <service-call name="mantle.yotpo.YotPoServices.login#YotPo" in-map="context" out-map="response"/>
            <if condition="response.token.access_token == null">
                <return error="true" message="Error with YotPo Access Token."/>
            </if>
            <set field="requestMap.utoken" from="response.token.access_token"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method("PUT")
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("apps").path(yotPoConfig.clientId).path("products").path("mass_update").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo Product ${productId} Response ${restResponse.statusCode} ${restResponse.reasonPhrase}: ${restResponse.text()}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode} ${restResponse.reasonPhrase}", "danger")
                    return
                }
                // responseMap = restResponse.jsonObject()
            ]]></script>
            <message type="success">YotPo product update successful (ID ${productId})</message>
        </actions>
    </service>
    
    <!-- this service registers all the products of a certain product StoreId  -->
    <service verb="create" noun="AllProducts">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseList"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <if condition="productStore.yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.yotpo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null"><return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/></if>

            <entity-find-one entity-name="mantle.product.store.ProductStoreCategory" value-field="productStoreCategory">
                <field-map field-name="productStoreId" from="productStoreId"/>
                <field-map field-name="storeCategoryTypeEnumId" value="PsctSearch"/>
            </entity-find-one>
            <if condition="productStoreCategory == null">
                <entity-find-one entity-name="mantle.product.store.ProductStoreCategory" value-field="productStoreCategory">
                    <field-map field-name="productStoreId" from="productStoreId"/>
                    <field-map field-name="storeCategoryTypeEnumId" value="PsctViewAllow"/>
                </entity-find-one>
                <if condition="productStoreCategory == null"><return message="No productStoreCategory found with productStoreId ${productStoreId}"/></if>
            </if>

            <set field="productCategoryId" from="productStoreCategory.productCategoryId"/>

            <entity-find entity-name="mantle.product.category.ProductCategoryMember" list="productList" cache="true">
                <date-filter/><econdition field-name="productCategoryId"/>
            </entity-find>
            
            <!--<service-call name="mantle.yotpo.YotPoServices.create#Product" in-map="[productId:product.productId, productStoreId:productStoreId]" out-map="responseMap"/>-->
            <set field="responseList" from="[]"/>
            <iterate list="productList" entry="product">
                <service-call name="mantle.yotpo.YotPoServices.create#Product" in-map="[productId:product.productId, productStoreId:productStoreId]" out-map="responseMap"/>
                <script>responseList.add(responseMap)</script>
            </iterate> 
        </actions>
    </service>
    <service verb="create" noun="StoreProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.yotpo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null"><return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/></if>

            <service-call name="mantle.yotpo.YotPoServices.get#YotPoProductData" out-map="prodData"
                    in-map="[productId:productId, productStoreId:productStoreId]"/>
            <if condition="!prodData.detailUrl || !prodData.name">
                <log message="YotPo product ${productId} store ${productStoreId} data: ${prodData}"/>
                <return type="danger" message="Could not find product detail URL or name so not sending product ${productId} data to YotPo for store ${productStoreId}"/>
            </if>

            <set field="itemMap" from="[name:prodData.name, url:prodData.detailUrl,
                    image_url:prodData.imageUrl, description:prodData.description,
                    currency:prodData.priceUomId, price:prodData.priceString, specs:prodData.specs]"/>

            <set field="requestMap" from="[products:[(productId):itemMap]]"/>

            <service-call name="mantle.yotpo.YotPoServices.login#YotPo" in-map="context" out-map="response"/>
            <if condition="response.token.access_token == null">
                <return error="true" message="Error with YotPo Access Token."/>
            </if>
            <set field="requestMap.utoken" from="response.token.access_token"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("apps").path(yotPoConfig.clientId).path("products").path("mass_create").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>
        </actions>
    </service>

    <!-- Service to create a new review -->
    <service verb="create" noun="Review">
        <in-parameters>
            <parameter name="productStoreId" required="true"/>
            <parameter name="productId" required="true"/>
            <parameter name="customerPartyId"/>
            <parameter name="reviewContent" required="true"><description>User comment</description></parameter>
            <parameter name="reviewTitle" required="true"><description>Title of the review</description></parameter>
            <parameter name="reviewScore" required="true"><description>Review score that can range from 1 to 5</description></parameter>
            <parameter name="timeStamp"><description>Date of when the review was written, if nothing is sent YotPo automatically date</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.product.Product" value-field="product"/>
            <if condition="product == null"><return message="No product found with ID ${productId}"/></if>

            <service-call name="mantle.party.ContactServices.get#PartyContactInfo" out-map="emailInfo"
                in-map="[partyId:customerPartyId, emailContactMechPurposeId:true]"/>
            <set field="email" from="emailInfo.emailAddress"/>
            <if condition="email == null">
                <return message="The client's email was not found with customerPartyId ${customerPartyId}"/>
            </if>

            <entity-find-one entity-name="mantle.party.PartyDetail" value-field="partyDetail">
                <field-map field-name="partyId" from="customerPartyId"/>
            </entity-find-one>
            <if condition="partyDetail == null"><return message="No partyDetail found with partyId ${customerPartyId}"/></if>

            <set field="organizationName" from="partyDetail.organizationName ? partyDetail.organizationName : ''"/>
            <set field="customerName" from="partyDetail.firstName + ' ' + partyDetail.lastName + ' ' + organizationName"/>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.yotpo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null"><return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/></if>

            <service-call name="mantle.yotpo.YotPoServices.get#YotPoProductData" out-map="prodData"
                    in-map="[productId:productId, productStoreId:productStoreId]"/>
            <if condition="!prodData.detailUrl || !prodData.name">
                <log message="YotPo product ${productId} store ${productStoreId} data: ${prodData}"/>
                <return type="danger" message="Not sending review, could not find product ${productId} detail URL or name for store ${productStoreId}"/>
            </if>

            <set field="requestMap" from="[appkey:yotPoConfig.clientId, domain:productStore.storeDomain, sku:productId,
                    product_title:prodData.name, product_description:prodData.description,
                    product_url:prodData.detailUrl, product_image_url:prodData.imageUrl,
                    display_name:customerName, email:email, review_content:reviewContent,
                    review_title:reviewTitle, review_score:reviewScore, time_stamp:timeStamp]" />

            <service-call name="mantle.yotpo.YotPoServices.login#YotPo" in-map="context" out-map="response"/>
            <if condition="response.token.access_token == null">
                <return error="true" message="Error with Access Token."/>
            </if>
            <set field="requestMap.utoken" from="response.token.access_token"/>
            <!-- Path only for tests
                .path("reviews")path("dynamic_create")
            -->
            <!-- Path for production 
                .path("${yotPoConfig.apiVersion}").path("widget").path("reviews").build() 
             -->
            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("reviews").path("dynamic_create").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>
        </actions>
    </service>

    <!-- This service returns the list of reviews according to the product Id -->
    <service verb="get" noun="ReviewByProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="productStoreId" required="true"/>
            <parameter name="perPage" type="Integer" default="10"><description>Number of reviews per page</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.product.store.ProductStore" value-field="productStore">
                <field-map field-name="productStoreId"/></entity-find-one>
            <if condition="productStore == null"><return message="No productStore found with productStoreId ${productStoreId}"/></if>

            <set field="yotPoConfigId" from="productStore.yotPoConfigId"/>
            <if condition="yotPoConfigId == null"><return message="No yotPoConfigId found with productStoreId ${productStoreId}"/></if>

            <entity-find-one entity-name="mantle.yotpo.YotPoConfiguration"  value-field="yotPoConfig"/>
            <if condition="yotPoConfig == null"><return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/></if>

            <service-call name="mantle.yotpo.YotPoServices.login#YotPo" in-map="context" out-map="response"/>
            <if condition="response.token.access_token == null">
                <return error="true" message="Error with Access Token."/>
            </if>
            <set field="uToken" from="response.token.access_token"/>

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method("GET")
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path(yotPoConfig.apiVersion).path("widget").path(yotPoConfig.clientId)
                        .path("products").path(productId).path("reviews.json")
                        .parameter("per_page", perPage as String).build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }
                responseMap = restResponse.jsonObject()
            ]]></script>
        </actions>
    </service>

    <service verb="login" noun="YotPo" authenticate="anonymous-view">
        <in-parameters>
            <parameter name="yotPoConfigId"/>
            <parameter name="yotPoConfig" type="Map"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="yotPoConfig == null">
                <entity-find-one entity-name="mantle.yotpo.YotPoConfiguration"  value-field="yotPoConfig"/>
                <if condition="yotPoConfig == null"><return error="true" message="No YotPoConfiguration found with ID ${yotPoConfigId}"/></if>
            </if>
            
            <set field="requestMap" from="[client_id:yotPoConfig.clientId, 
                client_secret:yotPoConfig.clientSecret, grant_type:'client_credentials']" />

            <script><![CDATA[
                org.moqui.util.RestClient restClient = ec.service.rest().method(org.moqui.util.RestClient.POST)
                        .addHeader("Content-Type", "application/json").jsonObject(requestMap)
                restClient.uri().protocol("https").host(yotPoConfig.hostName ?: "api.yotpo.com").port(443)
                        .path("oauth").path("token").build()
                org.moqui.util.RestClient.RestResponse restResponse = restClient.call()
                    
                if (restResponse.statusCode != 200) {
                    ec.logger.error("YotPo API Response ${restResponse.statusCode}")
                    ec.message.addMessage("YotPo API Error ${restResponse.statusCode}")
                    return
                }
                token = restResponse.jsonObject()
                // ec.logger.warn("${token}")
                if(token.status != null || token.error != null) {
                    ec.logger.error("YotPo API Error Response ${token.status != null ? token.status.code : token.error}")
                    ec.message.addMessage("YotPo API Error Response ${token.status != null ? token.status.error_type : token.error}")
                    token = null
                    return
                }
            ]]></script> 
        </actions>
    </service>
</services>